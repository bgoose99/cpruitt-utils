package data.problems;

import data.AbstractProblem;

public class Problem012 extends AbstractProblem
{
    public Problem012()
    {
        setNumber( 12 );
        setDescription( "<html>The sequence of triangle numbers is generated by adding the<br>"
                + "natural numbers. So the 7th triangle number would be<br>"
                + "<b>1 + 2 + 3 + 4 + 5 + 6 + 7 = 28</b>. The first ten terms would be:<br><br>"
                + "<b>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</b><br><br>"
                + "Let us list the factors of the first seven triangle numbers:<br><br>"
                + "<b>1: 1<br>"
                + "3: 1,3<br>"
                + "6: 1,2,3,6<br>"
                + "10: 1,2,5,10<br>"
                + "15: 1,3,5,15<br>"
                + "21: 1,3,7,21<br>"
                + "28: 1,2,4,7,14,28</b><br><br>"
                + "We can see that 28 is the first triangle number to have over five divisors.<br><br>"
                + "What is the value of the first triangle number to have over five hundred divisors?</html>" );
    }

    @Override
    public String getSolution()
    {
        int triangleNumber = 0;

        for( int i = 8; i < 1000000; i++ )
        {
            triangleNumber = getTriangleNumber( i );
            if( getNumDivisors( triangleNumber ) > 500 )
            {
                return "Triangle number " + i + ": " + triangleNumber;
            }
        }

        return "Solution not found";
    }

    private int getTriangleNumber( int num )
    {
        int sum = 0;

        for( int i = 1; i <= num; i++ )
        {
            sum += i;
        }

        return sum;
    }

    private int getNumDivisors( int num )
    {
        int divisors = 2; // 1 and the number
        int limit = num;

        for( int i = 2; i < limit; i++ )
        {
            if( num % i == 0 )
            {
                // if this number is evenly divisible by i, then it has two
                // additional factors: i and the quotient
                // we can now lower the limit to the quotient
                // this *little* optimization CONSIDERABLY speeds up the
                // calculation
                divisors += 2;
                limit = num / i;
            }
        }

        return divisors;
    }
}
