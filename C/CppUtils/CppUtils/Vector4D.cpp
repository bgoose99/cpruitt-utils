
#include <cmath>

#include "Vector4D.h"

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D::Vector4D() :
   w( 0.0 ), x( 0.0 ), y( 0.0 ), z( 0.0 )
{
   calculateMagnitude();
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D::Vector4D( const double &w, const double &x, const double &y, const double &z ) :
   w( w ), x( x ), y( y ), z( z )
{
   calculateMagnitude();
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D::Vector4D( const Vector4D &vec ) :
   w( vec.w ), x( vec.x ), y( vec.y ), z( vec.z ), mag( vec.mag )
{
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D::~Vector4D()
{
}

/******************************************************************************
 * 
 *****************************************************************************/
double Vector4D::W() const
{
   return w;
}

/******************************************************************************
 * 
 *****************************************************************************/
void Vector4D::setW( const double &w )
{
   this->w = w;
   calculateMagnitude();
}

/******************************************************************************
 * 
 *****************************************************************************/
double Vector4D::X() const
{
   return x;
}

/******************************************************************************
 * 
 *****************************************************************************/
void Vector4D::setX( const double &x )
{
   this->x = x;
   calculateMagnitude();
}

/******************************************************************************
 * 
 *****************************************************************************/
double Vector4D::Y() const
{
   return y;
}

/******************************************************************************
 * 
 *****************************************************************************/
void Vector4D::setY( const double &y )
{
   this->y = y;
   calculateMagnitude();
}

/******************************************************************************
 * 
 *****************************************************************************/
double Vector4D::Z() const
{
   return z;
}

/******************************************************************************
 * 
 *****************************************************************************/
void Vector4D::setZ( const double &z )
{
   this->z = z;
   calculateMagnitude();
}

/******************************************************************************
 * 
 *****************************************************************************/
double Vector4D::magnitude() const
{
   return mag;
}

/******************************************************************************
 * 
 *****************************************************************************/
void Vector4D::normalize()
{
   w /= mag;
   x /= mag;
   y /= mag;
   z /= mag;
   calculateMagnitude();
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D Vector4D::normalized() const
{
   return Vector4D( w / mag, x / mag, y / mag, z / mag );
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D &Vector4D::operator=( const Vector4D &vec )
{
   if( this != &vec )
   {
      w = vec.w;
      x = vec.x;
      y = vec.y;
      z = vec.z;
      calculateMagnitude();
   }
   
   return *this;
}

/******************************************************************************
 * 
 *****************************************************************************/
const Vector4D Vector4D::operator+( const Vector4D &vec ) const
{
   return Vector4D( w + vec.w, x + vec.x, y + vec.y, z + vec.z );
}

/******************************************************************************
 * 
 *****************************************************************************/
const Vector4D Vector4D::operator-( const Vector4D &vec ) const
{
   return Vector4D( w - vec.w, x - vec.x, y - vec.y, z - vec.z );
}

/******************************************************************************
 * 
 *****************************************************************************/
const Vector4D Vector4D::operator*( const double &scale ) const
{
   return Vector4D( w * scale, x * scale, y * scale, z * scale );
}

/******************************************************************************
 * 
 *****************************************************************************/
const Vector4D Vector4D::operator/( const double &divisor ) const
{
   return Vector4D( w / divisor, x / divisor, y / divisor, z / divisor );
}

/******************************************************************************
 * 
 *****************************************************************************/
bool Vector4D::operator==( const Vector4D &vec ) const
{
   if( this == &vec )
      return true;
   return ( w == vec.w && x == vec.x && y == vec.y && z == vec.z );
}

/******************************************************************************
 * 
 *****************************************************************************/
bool Vector4D::operator!=( const Vector4D &vec ) const
{
   return !( *this == vec );
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D &Vector4D::operator+=( const Vector4D &vec )
{
   w += vec.w;
   x += vec.x;
   y += vec.y;
   z += vec.z;
   calculateMagnitude();
   return *this;
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D &Vector4D::operator-=( const Vector4D &vec )
{
   w -= vec.w;
   x -= vec.x;
   y -= vec.y;
   z -= vec.z;
   calculateMagnitude();
   return *this;
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D &Vector4D::operator*=( const double &scale )
{
   w *= scale;
   x *= scale;
   y *= scale;
   z *= scale;
   calculateMagnitude();
   return *this;
}

/******************************************************************************
 * 
 *****************************************************************************/
Vector4D &Vector4D::operator/=( const double &divisor )
{
   w /= divisor;
   x /= divisor;
   y /= divisor;
   z /= divisor;
   calculateMagnitude();
   return *this;
}

/******************************************************************************
 * 
 *****************************************************************************/
void Vector4D::calculateMagnitude()
{
   mag = sqrt( w * w + x * x + y * y + z * z );
}
